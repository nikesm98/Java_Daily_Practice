class Solution {
    int largestSubsquare(int n, char[][] a) {

        int[][] byRows = new int[n][n];
        int[][] byCols = new int[n][n];

  
        for (int i = 0; i < n; i++) {
            int row = 0;
            for (int j = 0; j < n; j++) {
                if (a[i][j] == 'X') {
                    row++;
                } else {
                    row = 0;
                }
                byRows[i][j] = row;
            }
        }


        for (int i = 0; i < n; i++) {
            int col = 0;
            for (int j = 0; j < n; j++) {
                if (a[j][i] == 'X') {
                    col++;
                } else {
                    col = 0;
                }
                byCols[j][i] = col;
            }
        }

        int res = 0;
 
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int side = Math.min(byRows[i][j], byCols[i][j]);
                while (side > res) {
                    if (byRows[i - side + 1][j] >= side && byCols[i][j - side + 1] >= side) {
                        res = side;
                    } else {
                        side--;
                    }
                }
            }
        }
        return res;
    }
}