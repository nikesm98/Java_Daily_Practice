class Solution {
    static String longestSubstring(String s, int n) {
        int[][] dp = new int[n + 1][n + 1];
        int resLength = 0;
        int startIndex = 0;

        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (j - i > dp[i - 1][j - 1] && s.charAt(i - 1) == s.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                    if (dp[i][j] > resLength) {
                        resLength = dp[i][j];
                        startIndex = Math.max(i, startIndex);
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        StringBuilder result = new StringBuilder();
        if (resLength > 0) {
            for (int i = startIndex - resLength + 1; i <= startIndex; i++) {
                result.append(s.charAt(i - 1));
            }
        }

        return (result.length() > 0) ? result.toString() : "-1";
    }
}