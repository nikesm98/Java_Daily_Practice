class Solution {
    int mod = (int)1e9 + 7;

    int solve(String s, String t, int i, int j, int[][] dp) {
        if (t.length() == j) return 1;
        if (s.length() == i) return 0;
        if (dp[i][j] != -1) return dp[i][j];

        if (s.charAt(i) == t.charAt(j)) {
            return dp[i][j] = (solve(s, t, i + 1, j + 1, dp) % mod + solve(s, t, i + 1, j, dp) % mod) % mod;
        } else {
            return dp[i][j] = solve(s, t, i + 1, j, dp) % mod;
        }
    }

    int subsequenceCount(String s, String t) {
        int n = s.length();
        int m = t.length();

        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }

        return solve(s, t, 0, 0, dp) % mod;
    }
}