class Tree {
    ArrayList<Integer> noSibling(Node node) {
        ArrayList<Integer> ans = new ArrayList<>();
        findNoSibling(node, ans);
        if (ans.isEmpty())
            ans.add(-1);
        Collections.sort(ans);
        return ans;
    }

    void findNoSibling(Node node, ArrayList<Integer> ans) {
        if (node == null)
            return;

        findNoSibling(node.left, ans);

        if ((node.left != null && node.right == null) || (node.left == null && node.right != null))
            ans.add(node.left != null ? node.left.data : node.right.data);

        findNoSibling(node.right, ans);
    }
}

class Main {
    static Node buildTree(String str) {
        if (str.length() == 0 || str.charAt(0) == 'N') {
            return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;
        while (queue.size() > 0 && i < ip.length) {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if (!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if (i >= ip.length)
                break;
            currVal = ip[i];
            if (!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            String s = sc.next();
            Node root = buildTree(s);
            Tree g = new Tree();
            ArrayList<Integer> ans = g.noSibling(root);
            for (Integer val : ans)
                System.out.print(val + " ");
            System.out.println();
        }
    }
}
